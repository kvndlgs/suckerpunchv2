import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import { 
  Download, 
  Share2, 
  Copy, 
  Twitter, 
  Facebook,
  Link2,
  Music,
  Trophy,
  Clock
} from 'lucide-react';
import { Character, Instrumental } from '../lib/supabase';
import toast from 'react-hot-toast';

interface BattleResultsProps {
  battleId: string;
  character1: Character;
  character2: Character;
  winner: Character;
  instrumental: Instrumental;
  verses: Array<{
    characterId: string;
    text: string;
    audioUrl?: string;
    order: number;
  }>;
  onNewBattle: () => void;
  onReplay: () => void;
}

export const BattleResults: React.FC<BattleResultsProps> = ({
  battleId,
  character1,
  character2,
  winner,
  instrumental,
  verses,
  onNewBattle,
  onReplay
}) => {
  const [isGeneratingAudio, setIsGeneratingAudio] = useState(false);
  const [isGeneratingVideo, setIsGeneratingVideo] = useState(false);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Generate shareable link
  const battleUrl = `${window.location.origin}/battle/${battleId}`;

  // Copy link to clipboard
  const copyLink = async () => {
    try {
      await navigator.clipboard.writeText(battleUrl);
      toast.success('Link copied to clipboard!');
    } catch (error) {
      toast.error('Failed to copy link');
    }
  };

  // Share on social media
  const shareOnTwitter = () => {
    const text = `🎤 Epic rap battle: ${character1.name} vs ${character2.name}! Winner: ${winner.name} 🏆`;
    const url = `https://x.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(battleUrl)}`;
    window.open(url, '_blank');
  };

  const shareOnFacebook = () => {
    const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(battleUrl)}`;
    window.open(url, '_blank');
  };

  // Generate and download full audio mix
  const downloadAudioMix = async () => {
    setIsGeneratingAudio(true);
    try {
      // This would call your backend to mix all verses with the instrumental
      const response = await fetch('/api/generate-battle-audio', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          battleId,
          verses: verses.map(v => ({
            audioUrl: v.audioUrl,
            order: v.order,
            characterName: v.characterId === character1.id ? character1.name : character2.name
          })),
          instrumentalUrl: instrumental.audio_url,
          bpm: instrumental.bpm
        })
      });

      if (!response.ok) throw new Error('Failed to generate audio mix');

      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${character1.name}_vs_${character2.name}_battle.mp3`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast.success('Audio downloaded!');
    } catch (error) {
      toast.error('Failed to generate audio mix');
      console.error('Audio generation error:', error);
    } finally {
      setIsGeneratingAudio(false);
    }
  };

  // Generate battle summary as text
  const downloadTextSummary = () => {
    const battleText = `
🎤 RAP BATTLE RESULTS 🎤
${character1.name} vs ${character2.name}
Winner: ${winner.name} 🏆
Instrumental: ${instrumental.name} (${instrumental.bpm} BPM)
Date: ${new Date().toLocaleDateString()}

${verses.map((verse, index) => {
  const character = verse.characterId === character1.id ? character1 : character2;
  const verseNumber = Math.floor(index / 2) + 1;
  return `\n--- ${character.name} - Verse ${verseNumber} ---\n${verse.text}\n`;
}).join('')}

Generated by AI Rap Battle Generator
    `.trim();

    const blob = new Blob([battleText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${character1.name}_vs_${character2.name}_battle.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Battle text downloaded!');
  };

  // Generate video preview (canvas-based)
  const generateVideoPreview = async () => {
    setIsGeneratingVideo(true);
    try {
      // This would call your backend to generate a video with lyrics and character images
      const response = await fetch('/api/generate-battle-video', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          battleId,
          character1: {
            name: character1.name,
            avatar: character1.avatar_url
          },
          character2: {
            name: character2.name,
            avatar: character2.avatar_url
          },
          winner: winner.name,
          verses,
          instrumental: instrumental.name
        })
      });

      if (!response.ok) throw new Error('Failed to generate video');

      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${character1.name}_vs_${character2.name}_battle.mp4`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast.success('Video downloaded!');
    } catch (error) {
      toast.error('Failed to generate video');
      console.error('Video generation error:', error);
    } finally {
      setIsGeneratingVideo(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 p-6">
      <div className="max-w-4xl mx-auto">
        {/* Battle Summary */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-slate-900 rounded-2xl p-8 mb-8 text-center"
        >
          <img src='/logo.png' alt="suckerpunch" className="w-[240px] mx-auto py-4" />
          <h1 className="text-3xl montserrat-bold text-white mb-2">Battle Complete!</h1>
          <p className="text-xl montserrat-regular text-white/80">
            {character1.name} vs {character2.name}
          </p>
          <div className="mt-4 inline-flex items-center space-x-2 bg-yellow-400 text-gray-900 px-4 py-2 rounded-full font-bold">
            <Trophy className="w-5 h-5" />
            <span>Winner: {winner.name}</span>
          </div>
        </motion.div>

        {/* Share Options */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-gray-800 rounded-xl p-6 mb-8"
        >
          <h2 className="text-2xl font-bold text-white mb-4 flex items-center">
            <Share2 className="w-6 h-6 mr-2" />
            Share Your Battle
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <button
              onClick={copyLink}
              className="flex items-center justify-center space-x-2 bg-gray-700 hover:bg-gray-600 text-white p-3 rounded-lg transition-colors"
            >
              <Link2 className="w-5 h-5" />
              <span>Copy Link</span>
            </button>
            
            <button
              onClick={shareOnTwitter}
              className="flex items-center justify-center space-x-2 bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-lg transition-colors"
            >
              <Twitter className="w-5 h-5" />
              <span>Twitter</span>
            </button>
            
            <button
              onClick={shareOnFacebook}
              className="flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg transition-colors"
            >
              <Facebook className="w-5 h-5" />
              <span>Facebook</span>
            </button>
          </div>

          <div className="bg-gray-700 rounded-lg p-3">
            <p className="text-gray-300 text-sm mb-2">Share this link:</p>
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={battleUrl}
                readOnly
                className="flex-1 bg-gray-600 text-white p-2 rounded border-0 text-sm"
              />
              <button
                onClick={copyLink}
                className="p-2 hover:bg-gray-600 rounded transition-colors"
              >
                <Copy className="w-4 h-4 text-gray-300" />
              </button>
            </div>
          </div>
        </motion.div>

        {/* Download Options */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="bg-gray-800 rounded-xl p-6 mb-8"
        >
          <h2 className="text-2xl font-bold text-white mb-4 flex items-center">
            <Download className="w-6 h-6 mr-2" />
            Download Battle
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              onClick={downloadAudioMix}
              disabled={isGeneratingAudio}
              className="flex flex-col items-center justify-center space-y-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white p-6 rounded-lg transition-colors"
            >
              <Music className="w-8 h-8" />
              <span className="font-semibold">Full Audio Mix</span>
              <span className="text-sm opacity-75">MP3 with all verses</span>
              {isGeneratingAudio && (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              )}
            </button>
            
            <button
              onClick={generateVideoPreview}
              disabled={isGeneratingVideo}
              className="flex flex-col items-center justify-center space-y-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white p-6 rounded-lg transition-colors"
            >
              <Clock className="w-8 h-8" />
              <span className="font-semibold">Video Preview</span>
              <span className="text-sm opacity-75">MP4 with lyrics</span>
              {isGeneratingVideo && (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              )}
            </button>
            
            <button
              onClick={downloadTextSummary}
              className="flex flex-col items-center justify-center space-y-2 bg-blue-600 hover:bg-blue-700 text-white p-6 rounded-lg transition-colors"
            >
              <Download className="w-8 h-8" />
              <span className="font-semibold">Text Summary</span>
              <span className="text-sm opacity-75">All verses as text</span>
            </button>
          </div>
        </motion.div>

        {/* Action Buttons */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="flex flex-col md:flex-row gap-4 justify-center"
        >
          <button
            onClick={onReplay}
            className="px-8 py-3 bg-yellow-500 hover:bg-yellow-600 text-gray-900 font-bold rounded-lg transition-colors"
          >
            Watch Again
          </button>
          <button
            onClick={onNewBattle}
            className="px-8 py-3 bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white font-bold rounded-lg transition-colors"
          >
            New Battle
          </button>
        </motion.div>
      </div>
    </div>
  );
};